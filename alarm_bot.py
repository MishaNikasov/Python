import asyncio

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

from model.AlarmModel import AlarmModel
from service import alarm_service

bot = Bot('5211159874:AAFp5BEJc8pQNW9ZrzXDYJzQi53vinjrXfY')
dispatcher = Dispatcher(bot)

admin_id = 278725762
is_running = False

chat_list = dict({})


@dispatcher.message_handler(commands=['init'])
async def init(message: types.Message):
    global is_running
    if message.chat.id == admin_id and is_running is False:
        is_running = True
        await message.reply('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
        await __monitoring()
    elif message.chat.id == admin_id and is_running is True:
        await message.reply('–ë–æ—Ç —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç')


@dispatcher.message_handler(commands=['start'])
async def start(message: types.Message):
    await __add_to_monitoring(message)


@dispatcher.message_handler(commands=['stop'])
async def stop(message: types.Message):
    await __remove_from_monitoring(message)


@dispatcher.message_handler(commands=['state'])
async def state(message: types.Message):
    alarm_state = handle_state(alarm_service.get_alarm())
    await message.reply(alarm_state)


async def __add_to_monitoring(message: types.Message):
    if message.chat.id not in chat_list:
        print(str(message.chat.full_name) + ' https://t.me/' + str(message.chat.username) + ' connected')
        chat_list[message.chat.id] = message
        await message.answer('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞')
    else:
        await bot.send_photo(message.chat.id, 'https://prnt.sc/740HpA9Fbsdw', reply_to_message_id=message.message_id)


async def __remove_from_monitoring(message: types.Message):
    if message.chat.id in chat_list:
        chat_list.pop(message.chat.id)
        print(str(message.chat.full_name) + ' https://t.me/' + str(message.chat.username) + ' removed from monitoring')
        await message.answer('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞')
    else:
        await bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEEN3JiNxonIyJEZCfFrjfvFFld63kFZgACPhUAAuE7yEshrvTovPQkDyME', reply_to_message_id=message.message_id)


async def __handle_alarm(alarm: AlarmModel, message: types.Message):
    if alarm.status:
        print('–û—Ç–±–æ–π —Ç—Ä–µ–≤–æ–≥–∏: ' + alarm.update_time + ' = ' + message.chat.full_name)
        await message.answer('üü¢ –û—Ç–±–æ–π —Ç—Ä–µ–≤–æ–≥–∏: ' + alarm.update_time + is_bandertown(message.chat.full_name))
    else:
        print('–¢—Ä–µ–≤–æ–≥–∞: ' + alarm.update_time + ' = ' + message.chat.full_name)
        await message.answer('üî¥ –¢—Ä–µ–≤–æ–≥–∞: ' + alarm.update_time + is_bandertown(message.chat.full_name))


def handle_state(state: AlarmModel):
    if state.status:
        return "–ü–æ –∫–∞–π—Ñ—É"
    else:
        return "–¢—ã –µ—â–µ –Ω–µ –≤ –∫–æ—Ä–∏–¥–æ—Ä–µ?"


def is_bandertown(group_name: str):
    if group_name == '–°—Ö—ñ–¥–Ω–∏–π –ë–∞–Ω–¥–µ—Ä—Ç–∞—É–Ω':
        return '\n@SolnechnyjKudesnik\n@TheSkywallker\n@jar_1k\n@KiraBaril\n@DelphinGoth\n@Tymurrrr\n@Studa'
    else:
        return ''


async def __monitoring():
    alarm_state = True
    while True:
        await asyncio.sleep(20)
        current_alarm = alarm_service.get_alarm()
        if alarm_state != current_alarm.status:
            print('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: ' + current_alarm.update_time)
            alarm_state = current_alarm.status
            for key in chat_list:
                await __handle_alarm(current_alarm, chat_list[key])


executor.start_polling(dispatcher, skip_updates=True)
